######
Weaver 
######

A tool to extract code snippets from design documents and assemble them into a 
working source tree

********************
Initial Requirements
********************

Prioritized List
================

#. Bootstrap

   Start with a simple Weaver class written in python and able to extract 
   snippets from `.rst` files to generate a Weaver. Then write a design doc for
   a more complete Weaver (importing components of the SimpleWeaver as base 
   classes to extend) and use the SimpleWeaver to generate a (more) complete 
   Weaver from it. (May require a third weaver - after the written SimpleWeaver
   and generated Weaver - that gets generated by the first-generated Weaver and 
   can pull in and verify the design and generated code 

#. Support TDD (which itself has multiple frameworks)

   Satisfying this requirement will probably manifest as part of the ontology

Constraints
===========

- Support different models and languages (both code and markup)

  This will imply that the components that parse documents need to have a 
  base_class <- implementation_overlay design


Domain Model
============

Will need to work out how to describe this (probably a collaboration diagram 
or IDAR graph). Informally, I have: (note in this list a name for each class is
in parentheses)

(also note: the SimpleWeaver Domain Model is a subset of this)

Design Documents (DesignDoc)
  Files, initially in `.rst` format (but ideally, eventually, want to support
  multiple formats, so the component that parses them to extract snippets should
  have a separate interface/base class and implementation overlay

Snippets (Snippet) and Anchors (Anchor) 
  Snippets of code, indicated as such within a Design, which implement a 
  specific concern (perhaps for a specific context). Each snippet should start
  with a directive (specifically-formatted comment in the code language) 
  indicating that it should be woven to (or "before" or "after") an anchor.

  Each snippet should implement some model element (and its header should 
  indicate which model element), eg a class, or a concern, or activity, etc

  Anchors are marks in snippets (also a specifically-formatted comment in the
  code language) at which other snippet will be inserted by the weaver

Weaver
  The key component, it parses the design docs to collect snippets into some 
  sort of database (key-value store probably - this is internal to the weaver 
  though), verify that each snippet links back to some requirement, assemble 
  the snippets into source files and run tests over the generated output 

Database
  Holds the snippets, model elements, etc in a format that can be queried by
  the user to see how any piece of generated code fits into the program design

Verifier
  The verifier checks the snippets and (design) objects against the ontology 
  to ensure the code does in fact correspond to the design

Ontology
  A formal semantic description of the things the weaver understands (such as 
  DesignDocs and Snippets, also Classes, Methods, Models and Tests) and how they 
  relate. Used by the verifier, also the weaver might use it to work out 
  deployment (ie which snippets belong in which files and folders)

Requirements
  Ideally, every snippet should map back to some requirement

Tests
  Using some TDD framwork, tests should be written against the model

Methods : 
  At a minimum, any program should have a "main" routine (and any library a 
  collection of test programs calling the provided functionality), that meet 
  the requirement of "can be built and run at any time" - or at least, before
  any non-WIP commit.

  Method can also belong to classes or modules/packages

Classes : 
  Most software is going to be composed of classes, assembled from snippets

Usage Model
===========

SimpleWeaver usage should be something like::

  weave [ -i design/index.rst ] [ -o code/ ] 


